// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kstor.proto

package kstor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KstorRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	Bucketname           string   `protobuf:"bytes,4,opt,name=Bucketname,proto3" json:"Bucketname,omitempty"`
	Path                 string   `protobuf:"bytes,5,opt,name=Path,proto3" json:"Path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KstorRequest) Reset()         { *m = KstorRequest{} }
func (m *KstorRequest) String() string { return proto.CompactTextString(m) }
func (*KstorRequest) ProtoMessage()    {}
func (*KstorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08e2b1664a84c45e, []int{0}
}

func (m *KstorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KstorRequest.Unmarshal(m, b)
}
func (m *KstorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KstorRequest.Marshal(b, m, deterministic)
}
func (m *KstorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KstorRequest.Merge(m, src)
}
func (m *KstorRequest) XXX_Size() int {
	return xxx_messageInfo_KstorRequest.Size(m)
}
func (m *KstorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KstorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KstorRequest proto.InternalMessageInfo

func (m *KstorRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *KstorRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KstorRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KstorRequest) GetBucketname() string {
	if m != nil {
		return m.Bucketname
	}
	return ""
}

func (m *KstorRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type KstorReply struct {
	Info                 string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KstorReply) Reset()         { *m = KstorReply{} }
func (m *KstorReply) String() string { return proto.CompactTextString(m) }
func (*KstorReply) ProtoMessage()    {}
func (*KstorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_08e2b1664a84c45e, []int{1}
}

func (m *KstorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KstorReply.Unmarshal(m, b)
}
func (m *KstorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KstorReply.Marshal(b, m, deterministic)
}
func (m *KstorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KstorReply.Merge(m, src)
}
func (m *KstorReply) XXX_Size() int {
	return xxx_messageInfo_KstorReply.Size(m)
}
func (m *KstorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_KstorReply.DiscardUnknown(m)
}

var xxx_messageInfo_KstorReply proto.InternalMessageInfo

func (m *KstorReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*KstorRequest)(nil), "kstor.KstorRequest")
	proto.RegisterType((*KstorReply)(nil), "kstor.KstorReply")
}

func init() { proto.RegisterFile("kstor.proto", fileDescriptor_08e2b1664a84c45e) }

var fileDescriptor_08e2b1664a84c45e = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x2e, 0x2e, 0xc9,
	0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x6a, 0xb8, 0x78, 0xbc,
	0x41, 0x8c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0x66, 0xe7, 0xdc, 0x14,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x13, 0x24, 0xe2, 0x9d, 0x5a, 0x29, 0xc1, 0x04,
	0x11, 0xf1, 0x4e, 0xad, 0x14, 0x12, 0xe1, 0x62, 0x0d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x06,
	0x8b, 0x41, 0x38, 0x42, 0x72, 0x5c, 0x5c, 0x4e, 0xa5, 0xc9, 0xd9, 0xa9, 0x25, 0x79, 0x89, 0xb9,
	0xa9, 0x12, 0x2c, 0x60, 0x29, 0x24, 0x11, 0x21, 0x21, 0x2e, 0x96, 0x80, 0xc4, 0x92, 0x0c, 0x09,
	0x56, 0xb0, 0x0c, 0x98, 0xad, 0xa4, 0xc0, 0xc5, 0x05, 0xb5, 0xbd, 0x20, 0xa7, 0x12, 0xa4, 0x22,
	0x33, 0x2f, 0x2d, 0x1f, 0x6a, 0x39, 0x98, 0x6d, 0xe4, 0xc8, 0xc5, 0x0a, 0x56, 0x21, 0x64, 0x01,
	0x75, 0xa8, 0x73, 0x7e, 0x6e, 0x6e, 0x62, 0x5e, 0x8a, 0x90, 0xb0, 0x1e, 0xc4, 0x37, 0xc8, 0xae,
	0x97, 0x12, 0x44, 0x15, 0x2c, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0x7b, 0xd8, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0xde, 0x6c, 0x73, 0x69, 0xff, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KstorClient is the client API for Kstor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KstorClient interface {
	KstorCommand(ctx context.Context, in *KstorRequest, opts ...grpc.CallOption) (*KstorReply, error)
}

type kstorClient struct {
	cc *grpc.ClientConn
}

func NewKstorClient(cc *grpc.ClientConn) KstorClient {
	return &kstorClient{cc}
}

func (c *kstorClient) KstorCommand(ctx context.Context, in *KstorRequest, opts ...grpc.CallOption) (*KstorReply, error) {
	out := new(KstorReply)
	err := c.cc.Invoke(ctx, "/kstor.Kstor/KstorCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KstorServer is the server API for Kstor service.
type KstorServer interface {
	KstorCommand(context.Context, *KstorRequest) (*KstorReply, error)
}

func RegisterKstorServer(s *grpc.Server, srv KstorServer) {
	s.RegisterService(&_Kstor_serviceDesc, srv)
}

func _Kstor_KstorCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KstorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KstorServer).KstorCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kstor.Kstor/KstorCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KstorServer).KstorCommand(ctx, req.(*KstorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kstor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kstor.Kstor",
	HandlerType: (*KstorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KstorCommand",
			Handler:    _Kstor_KstorCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kstor.proto",
}
